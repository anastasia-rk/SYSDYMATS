local_init;
%% Load dataset
foamset = questdlg('Select data folder', ...
    'Data to process',...
	'foam_2010','foam_2019','vdpo','');
switch foamset
    case 'foam_2010'
        dataset = questdlg('Select data set', ...
        'Choice of set',...
        'C','D','');
    case 'foam_2019'
        dataset = questdlg('Select data set', ...
        'Choice of set',...
        'S','Y','Z','');
    case 'vdpo'
        dataset = 'V';      
end
folder = 'results';                                                     % specify category where to save files
dFolder = 'dictionaries';
regressors = questdlg('Select the domain of regressors', ...
    'Domain choice',...
	'Shift','Delta','');
switch regressors
    case 'Shift'
        metaFileName = ['Meta_',dataset];
        load(metaFileName);
        names = {'set','ny','nu'};                                          % names used to define results folder name (no more than 3).
        if normC ~= 1
            folder = [folder,'_norm'];
            dFolder = [dFolder,'_norm'];
        end
        folderName = make_folder(folder,names,dataset,n_y,n_u);             % create results folder
        dictFolder = make_folder(dFolder,names,dataset,n_y,n_u);            % create results folder
        d       = n_y + n_u;                                                % size of input vector x
    case 'Delta'
        metaFileName = ['Meta_delta_',dataset];
        load(metaFileName);
         folder = ['delta_',folder];
         dFolder = ['delta_',dFolder];
         if normC ~= 1
            folder = [folder,'_norm'];
            dFolder = [dFolder,'_norm'];
         end
        direction = questdlg('Type of delta operator', ...
        'Causality',...
        'Forward','Backward','');
        switch direction
            case 'Backward'
                folder = [folder,'_b'];
                dFolder = [dFolder,'_b'];
            case 'Forward'
                folder = [folder,'_f'];
                dFolder = [dFolder,'_f'];
        end
         names = {'set','lambda'};
         folderName = make_folder(folder,names,dataset,lambda);             % create results folder
         dictFolder = make_folder(dFolder,names,dataset,lambda);            % create results folder
         n_u = 1+lambda;
         n_y = 1;
         d = lambda*2;
end
T = 4000;
fileName = [folderName,'/OLS_results_T_',num2str(T),'.mat'];
load(fileName);
%% Load external parameters
load(['External_parameters_',dataset]);
x = values(Files,1);
if size(values,2) > 1
    y = values(Files,2);
else 
    y = [];
end
A = ones(size(x));                                                          % create unit vector for constants 
A_symb{1} = '1'
if ~isempty(y)                                                              % unknown mapping is a surface
   powers = permn(0:2,2);                                                   % permuntations of all 
   powers = powers(2:end,:);    
   nCols = min(size(powers,1),K);                                           % number of terms in the model shouldn't be higher then K
   for iCol = 1:nCols
       xCol = x.^powers(iCol,1);
       yCol = y.^powers(iCol,2);
       A = [A xCol.*yCol];
       A_symb{iCol+1} = ['$x^',num2str(powers(iCol,1)),'$ $y^',num2str(powers(iCol,2)),'$']; 
   end
else                                                                        % unknown mapping is a curve
    nCols = min(4,K);                                                       % number of terms in the model shouldn't be higher then K
    for iCol = 1:nCols                                                      % limit order of the model by the number of experimants
       A = [A x.^(iCol)];
   end
end
%% Estimate coefficients with LS
B = Theta(:,Files)';
beta = A\B; 
beta = beta';

Tab = table(Terms);
for iCoeff = 1:size(beta,2)
    Parameters = round(beta(:,iCoeff),2);
    varName = ['$\beta_',num2str(iCoeff-1),'$'];
    Tab = addvars(Tab,Parameters,'NewVariableNames',varName);
end
Table_coeffs_ls = Tab
%% Save table to tex
tableName = [folderName,'/Betas_T_',num2str(T)];
table2latex(Table_coeffs_ls,tableName);

%% Compute parameters for validation
testFiles  = Files(end) - 1;
index_test = 1:1000;

%% Validation procedure  
Theta_test = beta*A';
iRMSE = 0;
for iFile   = testFiles
    fName   = [dictFolder,'/Dict_',dataset,num2str(iFile)];
    File    = matfile(fName,'Writable',true);
    indSign = S(1:finalTerm);                                               % select the indeces of significant terms from the ordered set
    Phi_all = File.term(index_test,:);                                      % extract all terms into a vector
    Phi     = Phi_all(:,indSign);                                           % select only signficant terms
    y_model = Phi*Theta_test(:,iFile);                                      % model NARMAX output
    iRMSE   = iRMSE + 1;
    RMSE(iRMSE) = sqrt(mean((File.y_narx(index_test,1) - y_model).^2));     % Root Mean Squared Error
% Compare outputs
    figName = ['Outputs k=',num2str(iFile)];
    figure('Name',figName,'NumberTitle','off');
    plot(index_test+File.t_0,File.y_narx(index_test,1)); hold on;
    plot(index_test+File.t_0,y_model(index_test,1),'--'); hold on;
    legend('True output','Generated output');
    xlabel('Sample index'); ylabel(['$',y_str,'$']);

% tikzName = [folderName,'/',dataset,num2str(iFile),'_Gen_y_T_',num2str(T),'.tikz'];
% cleanfigure;
% matlab2tikz(tikzName, 'showInfo', false,'parseStrings',false,'standalone', ...
%             false, 'height', '4cm', 'width','15cm','checkForUpdates',false);
%         
 clear File Phi_all Phi y_model
end
%%
az = -140;
el =   50;
figure('Name','Parameter surfaces','NumberTitle','off');
colormap(my_map);
L2 = 4; % round(finalTerm/2); % Only display surfaces for first 8 parameters
for iTerm=1:7
subplot(L2,2,iTerm);
z = Theta(iTerm,Files)'; 
scatter3(L_cut_all(Files(index1)),D_rlx_all(Files(index1)),z(index1),'filled','LineWidth',5); hold on;
scatter3(L_cut_all(Files(index2)),D_rlx_all(Files(index2)),z(index2),'filled','LineWidth',5); hold on;
for iFile = testFiles
    scatter3(L_cut_all(iFile,1),D_rlx_all(iFile,1), theta_test{iFile}(iTerm,1),'filled','k','LineWidth',5); hold on;
end
srf = plot(ft{iTerm}); 
alpha(srf,0.7);
shading interp
grid on;
xlabel('$L_{cut}$');
ylabel('$D_{rlx}$');
zlabel(Terms{iTerm});
view(az,el)
end
tikzName = [folderName,'/Theta_surfaces_T_',num2str(T),'.tikz'];
cleanfigure;
matlab2tikz(tikzName, 'showInfo', false,'parseStrings',false,'standalone', ...
            false, 'height', '16cm', 'width','15cm','checkForUpdates',false);