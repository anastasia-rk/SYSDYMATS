local_init;
%%
foamset = questdlg('Select data folder', ...
    'Data to process',...
	'foam_2010','foam_2019','vdpo','');
switch foamset
    case 'foam_2010'
        dataset = questdlg('Select data set', ...
        'Choice of set',...
        'C','D','');
    case 'foam_2019'
        dataset = questdlg('Select data set', ...
        'Choice of set',...
        'S','Y','Z','');
    case 'vdpo'
        dataset = 'V';      
end
folder = 'results';                                                     % specify category where to save files
dFolder = 'dictionaries';
regressors = questdlg('Select the domain of regressors', ...
    'Domain choice',...
	'Shift','Delta','');
switch regressors
    case 'Shift'
        metaFileName = ['Meta_',dataset];
        load(metaFileName);
        names = {'set','ny','nu'};                                          % names used to define results folder name (no more than 3).
        if normC ~= 1
            folder = [folder,'_norm'];
            dFolder = [dFolder,'_norm'];
        end
        folderName = make_folder(folder,names,dataset,n_y,n_u);             % create results folder
        dictFolder = make_folder(dFolder,names,dataset,n_y,n_u);            % create results folder
        d       = n_y + n_u;                                                % size of input vector x
    case 'Delta'
        metaFileName = ['Meta_delta_',dataset];
        load(metaFileName);
         folder = ['delta_',folder];
         dFolder = ['delta_',dFolder];
         if normC ~= 1
            folder = [folder,'_norm'];
            dFolder = [dFolder,'_norm'];
         end
        direction = questdlg('Type of delta operator', ...
        'Causality',...
        'Forward','Backward','');
        switch direction
            case 'Backward'
                folder = [folder,'_b'];
                dFolder = [dFolder,'_b'];
            case 'Forward'
                folder = [folder,'_f'];
                dFolder = [dFolder,'_f'];
        end
         names = {'set','lambda'};
         folderName = make_folder(folder,names,dataset,lambda);             % create results folder
         dictFolder = make_folder(dFolder,names,dataset,lambda);            % create results folder
         n_u = 1+lambda;
         n_y = 1;
         d = lambda*2;
end

T = 2000;
dict_set = ['dict_',dataset];                                   
fileNames = sym(dict_set,[1 K]);                                            % vector of filenames
d       = n_y + n_u;                                                        % size of input vector x
index = (1:T);                                                              % length of the sample
Files =  1:K;  % ids of the sample
Validation_sets = [K-1]; % Validation_sets = [];
Files(Validation_sets) = [];
K = length(Files);
%% Show correlation between autoregressive and input terms
if n_y ~= 0
figure;
L2 = round(K/2);
iPlot = 0;
for iFile=Files                                                             % over all datasets
        fName = [dictFolder,'/',char(fileNames(iFile))];
        File = matfile(fName,'Writable',true);
        ind_y= n_y;
        iPlot = iPlot + 1;
        Rr = round(corrcoef(File.term(index,ind_y),File.y_narx(index,1)),4);
        subplot(L2,2,iPlot)
        scatter(File.term(index,ind_y),File.y_narx(index,1),'filled'); hold on;
        plot(File.term(index,ind_y),File.term(index,ind_y),'Linewidth',2); 
        title([dataset,num2str(iFile),', R = ',num2str(Rr(2,1))]); xlabel(char(symb_term{ind_y})); ylabel(['$',y_str,'$']);
        clear File tht Rr
end
%     tikzName = [folderName,'/Regressions_yt_T_',num2str(T),'.tikz'];
%     cleanfigure;
%     matlab2tikz(tikzName, 'showInfo', false,'parseStrings',false,'standalone', ...
%             false, 'height', '18cm', 'width','12cm','checkForUpdates',false);
end
%%     
figure;
L2 = round(length(Files)/2);
iPlot = 0;
for iFile=Files                                                             % over all datasets
        fName = [dictFolder,'/',char(fileNames(iFile))];
        File = matfile(fName,'Writable',true);
        ind_u= n_y + n_u;
        iPlot = iPlot + 1;
        Rr = round(corrcoef(File.term(index,ind_u),File.y_narx(index,1)),4);
        subplot(L2,2,iPlot)
        scatter(File.term(index,ind_u),File.y_narx(index,1),'filled'); hold on;
        plot(File.term(index,ind_u),File.term(index,ind_u),'Linewidth',2);
        title([dataset,num2str(iFile),', R = ',num2str(Rr(2,1))]); xlabel(['$',char(symb_term{ind_u}),'$']); ylabel(['$',y_str,'$']);
        clear File tht
end
tikzName = [folderName,'/Regressions_ut_T_',num2str(T),'.tikz'];
cleanfigure;
matlab2tikz(tikzName, 'showInfo', false,'parseStrings',false,'standalone', ...
            false, 'height', '18cm', 'width','12cm','checkForUpdates',false);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Select first significant basis vector for all datasets
iTerm = 1;                                                                  % the first significant term
AERR{iTerm} = zeros(nTerms,1);                                              % placeholder for AERR criteria
for iFile=Files                                                             % over all datasets
    fName = [dictFolder,'/',char(fileNames(iFile))];
    File = matfile(fName,'Writable',true);
    residual_init{iFile} =  File.y_narx(index,1);                           % initial residual
    for jTerm = dict_terms                                                  % over all polynomial terms in the dictionary
        term0 = File.term(index,jTerm);
        cf(iFile,jTerm) = cor_sqr(residual_init{iFile},term0);              % squared correlation coefficient for the dataset and the polynomial term
        AERR{iTerm}(jTerm) = AERR{iTerm}(jTerm) + cf(iFile,jTerm);          % Average error reduction ration over all datasets
        clear term0
    end
    clear File
end
AERR{iTerm}(:,:) = AERR{iTerm}(:,:)/K;
[AERR_m,iMax] = max(AERR{iTerm});                                           % find the index of the term with the highest criterion across all datasets
AERR_mm(iTerm,1) = AERR_m;
S(iTerm) = iMax;                                                            % save index of the term
dict_terms(iMax) = [];                                                      % reduce the dictionary of available terms
AMDL_sum = 0;
for iFile=Files                                                             % over all datasets
    fName = [dictFolder,'/',char(fileNames(iFile))];
    File = matfile(fName,'Writable',true);
    alpha{iFile}(:,iTerm)    = File.term(index,iMax);                       % the corresponding basis candidate term    
    phi  {iFile}(:,iTerm)    = File.term(index,iMax);                       % the corresponding basis vector 
    residual{iFile}(:,iTerm) = residual_update(residual_init{iFile},...     % the corresponding model residual
                                               phi{iFile}(:,iTerm));                                                        
    AMDL_sum = AMDL_sum + AMDL(residual{iFile}(:,iTerm),nNarx,iTerm);       % AMDL for the iFile dataset 
    clear File
end
AAMDL_all(iTerm) = AMDL_sum/K;                                              % average AMDL over all sets
significant_term{iTerm} =  symb_term{S(iTerm)};
disp(['Significant term ', num2str(iTerm),':'])
significant_term{iTerm}
%% Plot AERR across terms
% for j=1:nTerms                                                 % assign ticks
%     x_ticklabels{j} = char(symb_term{j});
% end
% ind_aerr = find(AERR{iTerm} > 0.82);
% figure;
% h1 = plot(AERR{iTerm}(ind_aerr)*100,'o','MarkerSize',10); hold on;
% set(h1, 'markerfacecolor', get(h1, 'color')); 
% set(gca,'XTick',[1:length(ind_aerr)]);
% set(gca,'XTickLabel',x_ticklabels(ind_aerr));
% ylabel('AERR, $\%$');xtickangle(90)
% % set(gca,'XTick',[1:nTerms]);
% % set(gca,'XTickLabel',x_ticklabels);
% xtickangle(90)
% xtickangle(90)
% tikzName = [folderName,'/AERR_first_',num2str(T),'.tikz'];
% cleanfigure;
% matlab2tikz(tikzName, 'showInfo', false,'parseStrings',false,'standalone', ...
%             false, 'height', '7cm', 'width','12cm','checkForUpdates',false);

%% Plot correlations
figure;
L2 = round(length(Files)/2);
iPlot = 0;
for iFile=Files                                                             % over all datasets
        fName = [dictFolder,'/',char(fileNames(iFile))];
        File = matfile(fName,'Writable',true);
        ind_u= S(iTerm);
        iPlot = iPlot + 1;
        tht = File.term(index,ind_u)\File.y_narx(index,1);
        y_regressed = File.term(index,ind_u)*tht;
        Rr = round(corrcoef(File.term(index,ind_u),File.y_narx(index,1)),4);
        subplot(L2,2,iPlot)
        scatter(File.term(index,ind_u),File.y_narx(index,1),'filled'); hold on;
        plot(File.term(index,ind_u),y_regressed,'Linewidth',2); 
        title([dataset,num2str(iFile),', R = ',num2str(Rr(2,1))]); xlabel(['$',char(symb_term{ind_u}),'$']);  ylabel(['$',y_str,'$']);
        
        clear File tht
end
tikzName = [folderName,'/Regressions_significant_T_',num2str(T),'.tikz'];
cleanfigure;
matlab2tikz(tikzName, 'showInfo', false,'parseStrings',false,'standalone', ...
            false, 'height', '18cm', 'width','12cm','checkForUpdates',false);

%% Main loop - forward selection
if length(dict_terms) + 1 < 30                                              % Maximum significant terms (if the algorithm is not terminated by the criterion)
    maxSign = length(dict_terms) + 1;
else
    maxSign = 30;                                                           
end
converged   = false;
iTerm       = 1;
bics        = [];
aics        = [];
amdls       = [];
while(iTerm <= maxSign) %&& ~converged                                      % loop over the number of significant terms
    iTerm = iTerm + 1;                                                      % increase the number of significant terms
    AERR{iTerm} = zeros(nTerms,1);                                          % placeholder for AERR criteria
    for iFile=Files                                                         % over all datasets
        fName = [dictFolder,'/',char(fileNames(iFile))];
        File = matfile(fName,'Writable',true);
        for jTerm = dict_terms                                              % over all polynomial terms in the dictionary
            p{iTerm,iFile}(:,jTerm) = orthogonalise(File.term(index,jTerm),...
                                                    phi{iFile},iTerm);      % orthogonalise basis
            cf(iFile,jTerm)         = cor_sqr(residual_init{iFile},...
                                              p{iTerm,iFile}(:,jTerm));     % squared correlation coefficient for the dataset and the polynomial term
            AERR{iTerm}(jTerm) = AERR{iTerm}(jTerm) + cf(iFile,jTerm);      % Average error reduction ration over all datasets
        end
        clear File
    end
    AERR{iTerm}(:,:) = AERR{iTerm}(:,:)/K;
    [AERR_m,iMax] = max(AERR{iTerm});                                       % Find the index of the term with the highest criterion across all datasets
    AERR_mm(iTerm,1)   = AERR_m;
    S(iTerm) = iMax;                                                        % Save index of the term  
    ind = find(dict_terms == iMax);
    dict_terms(ind) = [];                                                   % Reduce the dictionary of available terms
    AMDL_sum = 0;
    BIC_sum  = 0;
    AIC_sum  = 0;
    for iFile=Files
        fName = [dictFolder,'/',char(fileNames(iFile))];
        File = matfile(fName,'Writable',true);
        alpha{iFile}(:,iTerm) = File.term(index,S(iTerm));                  % the corresponding basis candidate term    
        phi{iFile}(:,iTerm)   = p{iTerm,iFile}(index,S(iTerm));             % the corresponding basis vector 
        residual{iFile}(:,iTerm) = residual_update(residual{iFile}(:,iTerm-1),...
                                                   phi{iFile}(:,iTerm));    % the corresponding model residual                                 
        AMDL_sum = AMDL_sum + AMDL(residual{iFile}(:,iTerm),nNarx,iTerm);   % AMDL for the iFile dataset
        BIC_sum  = BIC_sum  +  BIC(residual{iFile}(:,iTerm),nNarx,iTerm);   % BIC for the iFile dataset
        AIC_sum  = AIC_sum  +  AIC(residual{iFile}(:,iTerm),nNarx,iTerm);   % AIC for the iFile dataset
        clear File
    end
    significant_term{iTerm} = symb_term{S(iTerm)};
    disp(['Significant term ', num2str(iTerm),':'])
    significant_term{iTerm}
    AAMDL_all(iTerm) = AMDL_sum/K;                                          % average AMDL over all sets
    BIC_all(iTerm) = BIC_sum/K;                                             % average AMDL over all sets
    AIC_all(iTerm) = AIC_sum/K;                                             % average AMDL over all sets
    converged_BIC = (abs((BIC_all(iTerm) - BIC_all(iTerm-1))/BIC_all(iTerm-1)) < 0.005); % check convergence
    converged_AIC = (abs((AIC_all(iTerm) - AIC_all(iTerm-1))/AIC_all(iTerm-1)) < 0.005); % check convergence
    converged_AAMDL = (abs((AAMDL_all(iTerm) - AAMDL_all(iTerm-1))/AAMDL_all(iTerm-1)) < 0.005); % check convergence
    if converged_BIC
        bics  = [bics,iTerm];
    end
    if converged_AIC
        aics  = [aics,iTerm];
        end
    if converged_AAMDL
        amdls  = [amdls,iTerm];
    end
end
%% Select optimal number of terms
[max_aic,i_aic] = min(AIC_all);
figure('Name','AAMDL','NumberTitle','off');
subplot(3,1,1);
plot(AAMDL_all,'o'); hold on;
plot(amdls(1),AAMDL_all(amdls(1)),'*','LineWidth',5);
xlim([1 iTerm])
xlabel('Number of terms');
ylabel('AAMDL')
subplot(3,1,2);
plot(BIC_all,'o'); hold on;
plot(bics(1),BIC_all(bics(1)),'*','LineWidth',5);
xlim([1 iTerm])
xlabel('Number of terms');
ylabel('BIC')
subplot(3,1,3);
plot(AIC_all,'o'); hold on;
plot(aics(1),AIC_all(aics(1)),'*','LineWidth',5);
xlim([1 iTerm])
xlabel('Number of terms');
ylabel('AIC')
%%
tikzName = [folderName,'/AAMDL_T_',num2str(T),'.tikz'];
cleanfigure;
matlab2tikz(tikzName, 'showInfo', false,'parseStrings',false,'standalone', ...
            false, 'height', '4cm', 'width','6cm','checkForUpdates',false);
%% Create column of names
finalTerm = bics(1);
for iTerm=1:finalTerm
      temp = arrayfun(@char, significant_term{iTerm}, 'uniform', 0);
    if length(temp) > 0
        str = temp{1};
        for iString=2:length(temp)
            str = [str,temp{iString}];
        end
    end
    Terms{iTerm,1} = strcat('$',str,'$');
    clear temp
end
Step = [1:finalTerm]';
Tab = table(Step,Terms);
%% Plot AERR surface
% figure;
% for iTerm=2:finalTerm
% plot3(iTerm*ones(nTerms,1),[1:nTerms],AERR{iTerm}*100,'-o'); hold on;
% zlabel('AERR, $\%$'); ylabel('Terms'); xlabel('Iteration')
% end
% set(gca,'YTick',[1:nTerms]);
% set(gca,'YTickLabel',x_ticklabels);
% ytickangle(45)
% tikzName = [folderName,'/All_AERR_T_',num2str(T),'.tikz'];
% cleanfigure;
% matlab2tikz(tikzName, 'showInfo', false,'parseStrings',false,'standalone', ...
%             false, 'height', '4cm', 'width','12cm','checkForUpdates',false);

clear AERR
%% Parameter estimation
for iFile=Files
    U{iFile} = zeros(finalTerm,finalTerm);                                  % placeholder for upper-trig unit matrix
    iTerm = 1;                                                              % for the first term
    g{iFile}(iTerm) = (residual_init{iFile}'*phi{iFile}(:,iTerm))/...
                      (phi{iFile}(:,iTerm)'*phi{iFile}(:,iTerm));           % top raw of the rotation matrix
    for jTerm =iTerm:finalTerm
        U{iFile}(iTerm,jTerm) = alpha{iFile}(:,jTerm)'*phi{iFile}(:,iTerm)/...
                                (phi{iFile}(:,iTerm)'*phi{iFile}(:,iTerm));
    end
    for iTerm = 2:finalTerm                                                 % loop over significant terms
        g{iFile}(iTerm,1) = (residual{iFile}(:,iTerm-1)'*phi{iFile}...
                    (:,iTerm))/(phi{iFile}(:,iTerm)'*phi{iFile}(:,iTerm));  % righthand side (normalised)
        for jTerm =iTerm:finalTerm
            U{iFile}(iTerm,jTerm) = alpha{iFile}(:,jTerm)'*phi{iFile}...
                     (:,iTerm)/(phi{iFile}(:,iTerm)'*phi{iFile}(:,iTerm));  % upper triangular unit matrix
        end
    end
    Dets = det(U{iFile});
    Theta(:,iFile) = linsolve(U{iFile},g{iFile},struct('UT', true));        % solve upper triangular system via backward substitution
    Parameters = round(Theta(:,iFile),2);
    varName = [dataset,num2str(iFile)];
    Tab = addvars(Tab,Parameters,'NewVariableNames',varName);
end
%% Store to table
AERR  = round(AERR_mm(1:finalTerm,1)*100,3);
Table_all = addvars(Tab,AERR,'NewVariableNames',{'AERR($\%$)'})
tableName = [folderName,'/Thetas_T_',num2str(T)];
table2latex(Table_all,tableName);
%% 
L2 = round(finalTerm/2);
figure('Name','Internal parameters','NumberTitle','off');
for iFig=1:finalTerm
    subplot(2,L2,iFig)
    plot(Files,Theta(iFig,Files),'o','LineWidth',2); hold on;
    ylabel(Terms{iFig,1});
    xlabel('Dataset index');
end
tikzName = [folderName,'/Estimates_T_',num2str(T),'.tikz'];
cleanfigure;
matlab2tikz(tikzName, 'showInfo', false,'parseStrings',false,'standalone', ...
            false, 'height', '6cm', 'width','12cm','checkForUpdates',false);
%% Store data in table
workspaceName = [folderName,'/OLS_results_T_',num2str(T),'.mat'];
save(workspaceName,'Theta','Terms','Files','finalTerm','T','n_y','n_u','S');