my_init;
%% Set up global parameters
dataset = 'C'; % 'D'; %                                                     % name of dataset
iFile   = 1;                                                                % id of the sample
K       = 5;                                                                % number of datasets
% Length of input and output lags
n_u     = 3;                                                                % input signal lag length
n_y     = 3;                                                                % output signal lag length
d       = n_u + n_y;                                                        % size of input vector x
lambda  = 4;                                                                % order of polynomial
a       = sym('a',[1 d]);                                                   % associated symbolic vector
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Prelimianries
for iFile=1:K
disp(['Dataset_',num2str(iFile)])
%% Upload data
clear Input Output 
fileName = [num2str(iFile),dataset];
load(fileName);
Input  = fileData(:,2);
Output = fileData(:,3);
T = length(Input); % length of the observation sequence
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Create the batch of input vectors
diff = n_u - n_y;                                                           % difference between lags
switch sign(diff)
    case 0
        disp('zero')
        t_0 = n_u+1;
    case -1
        disp('negative')
        t_0 = n_y+1;
    case 1
        disp('positive')
        t_0 = n_u+1;
end

iNarx = 0;                                                                  % batch index of the input vector in AR model
for t=t_0:T
    iNarx = iNarx + 1;
    x_narx{iFile}(:,iNarx) = [Input(t-n_u:t-1,1);Output(t-n_y:t-1,1)];      % NARX input
    y_narx{iFile}(:,iNarx) = Output(t,1);                                   % NARX output
end
nNarx = iNarx;                                                              % length of NARX input batch
inp{iFile} = Input;
out{iFile} = Output;
time = fileData(:,1);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Create sum index permutations
indeces{1} = [1:d]';
for iLambda=2:lambda                                                        % iLambda - order of polynomial term
    initial_m = permn(1:d,iLambda);                                         % get all permutations with repetition
    M = initial_m;                                                          % M - temporary set of permutations
    for j=iLambda:-1:2
        ind = find(M(:,j)>=M(:,j-1));                                       % sort out only increasing indeces
        M = M(ind,:);                                                       % update set
        clear ind
    end
    indeces{iLambda} = M;                                                   % all index combinations of order iLambda
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Create the batch of regressors and compute all polynomial terms
iTerm = 0;
for iLambda = 1:lambda                                                      % iLambda - order of polynomial term
    for k = 1:size(indeces{iLambda},1)                                      % get index combination for the regressor in the sum
        iTerm = iTerm + 1;                                                  % term index in the polynomial
        for iNarx = 1:nNarx                                                 % going throught the full NARX batch
            term{iFile}(iNarx,iTerm) = regressor(x_narx{iFile}...
                                       (:,iNarx),indeces{iLambda}(k,:));    % compute the regressor (numeric)
        end
        symb_term{iTerm} = a(indeces{iLambda}(k,:));                      % dictionary of regressors (symbolic)
    end    
end
disp('Dictionary of candidate model terms')
end                                                                         % end loop over files
nTerms = iTerm;                                                             % total number of regressors in the polynomial
dict_terms = [1:nTerms];                                                    % dictionary of all terms
%% check inputs and output in a figure
figure;
id = 1;
for iFile=1:5
    subplot(5,2,id)
    plot(time,inp{iFile}); hold on;
    names(iFile) = {[dataset,num2str(iFile)]};
    title(names(iFile));
    ylabel('Load')
    id = id + 1;
    subplot(5,2,id)
    plot(time,out{iFile}); hold on;
    title(names(iFile));
    ylabel('Disp')
    id = id + 1;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Select first significant basis vector for all datasets
iTerm = 1;                                                                  % the first significant term
AEER{iTerm} = zeros(nTerms,1);                                              % placeholder for AERR criteria
for iFile=1:K                                                               % over all datasets
    residual_init{iFile} =  y_narx{iFile}';                                 % initial residual
    for jTerm = dict_terms                                                  % over all polynomial terms in the dictionary
        cf(iFile,jTerm) = cor_sqr(y_narx{iFile}',term{iFile}(:,jTerm));     % squared correlation coefficient for the dataset and the polynomial term
        AEER{iTerm}(jTerm) = AEER{iTerm}(jTerm) + cf(iFile,jTerm);          % Average error reduction ration over all datasets
    end
end
[AEER_max,iMax] = max(AEER{iTerm});                                         % Find the index of the term with the highest criterion across all datasets
S(iTerm) = iMax;                                                            % Save index of the term
dict_terms(iMax) = [];                                                      % Reduce the dictionary of available terms
for iFile=1:K                                                               % over all datasets
    alpha{iFile}(:,iTerm) = term{iFile}(:,iMax);                            % the corresponding basis candidate term    
    phi{iFile}(:,iTerm)   = term{iFile}(:,iMax);                            % The corresponding basis vector 
    residual{iFile}(:,iTerm) = residual_update(residual_init{iFile},...     % the corresponding model residual
                                   phi{iFile}(:,iTerm));
end
disp(['Significant term ', num2str(iTerm),':'])
significant_term{iTerm} = symb_term{S(iTerm)}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Main loop - forward selection
maxSign     = 10;                                                           % Maximum significant terms (if the algorithm is not terminated by the criterion)
converged   = false;
iTerm       = 2;
while(iTerm < maxSign) && ~converged                                        % loop over the number of significant terms
    AEER{iTerm} = zeros(nTerms,1);                                          % placeholder for AERR criteria
    for iFile=1:K                                                           % over all datasets
        for jTerm = dict_terms                                              % over all polynomial terms in the dictionary
            p{iTerm,iFile}(:,jTerm) = orthogonalise(term{iFile}(:,jTerm),phi{iFile},iTerm);
            cf(iFile,jTerm) = cor_sqr(y_narx{iFile}',p{iTerm,iFile}(:,jTerm)); % squared correlation coefficient for the dataset and the polynomial term
            AEER{iTerm}(jTerm) = AEER{iTerm}(jTerm) + cf(iFile,jTerm);      % Average error reduction ration over all datasets
        end
    end
    [AEER_max,iMax] = max(AEER{iTerm});                                     % Find the index of the term with the highest criterion across all datasets
    S(iTerm) = dict_terms(iMax);                                                        % Save index of the term  
%     index = find(dict_terms == iMax)
    dict_terms(iMax) = [];                                                 % Reduce the dictionary of available terms
    AMDL_sum = 1;
    for iFile=1:K
        alpha{iFile}(:,iTerm) = term{iFile}(:,iMax);                        % the corresponding basis candidate term    
        phi{iFile}(:,iTerm)   = term{iFile}(:,iMax);                        % The corresponding basis vector 
        residual{iFile}(:,iTerm) = residual_update(residual{iFile}(:,iTerm-1),phi{iFile}(:,iTerm)); % the corresponding model residual                                 
        AMDL_sum = AMDL_sum + AMDL(residual{iFile}(:,iTerm),nNarx,iTerm);   % AMDL for the iFile dataset
    end
    significant_term{iTerm} = symb_term{S(iTerm)};
    disp(['Significant term ', num2str(iTerm),':'])
    significant_term{iTerm}
    AAMDL(iTerm) = AMDL_sum/K;                                              % average AMDL over all sets
    converged = (AAMDL(iTerm) < -10);                                       % check convergence PLACEHOLDER
    iTerm = iTerm + 1;                                                      % increase the number of significant terms
end
%%
figure('Name','AAMDL','NumberTitle','off'); 
plot(AAMDL(2:end),'o');

%% Parameter estimation 

